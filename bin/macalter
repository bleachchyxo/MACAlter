#!/bin/sh

# macalter - MAC address generator and spoofer
# Usage:
#   macalter gen [brand] [--set]     Generate random MAC (optionally from brand), optionally set it now
#   macalter set XX:XX:XX:XX:XX:XX   Set specific MAC address now
#   macalter real                    Show original hardware MAC
#   macalter revert                  Restore original MAC
#   macalter boot                   Spoof MAC on boot according to /etc/macalter.conf

set -eu

config_file="/etc/macalter.conf"
prefix_file="/usr/local/share/macalter/prefixes.txt"
saved_mac_dir="/var/lib/macalter"
mkdir -p "$saved_mac_dir"

# Detect primary interface (non-loopback, non-virtual)
interface="$(ip -o link show | awk -F': ' '/^[0-9]+: / && $2 !~ /^(lo|vir|br|docker)/ {print $2; exit}')"
if [ -z "$interface" ]; then
    echo "Error: No valid network interface found." >&2
    exit 1
fi

saved_mac_file="$saved_mac_dir/${interface}.real"
persistent_mac_file="$saved_mac_dir/${interface}.mac"

# Check root
die_if_not_root() {
    [ "$(id -u)" -eq 0 ] || {
        echo "Error: Root required. Run with sudo." >&2
        exit 1
    }
}

is_valid_mac() {
    echo "$1" | grep -Eq '^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$'
}

save_real_mac() {
    if [ ! -f "$saved_mac_file" ]; then
        cat "/sys/class/net/$interface/address" > "$saved_mac_file"
    fi
}

set_mac() {
    die_if_not_root
    mac="$1"
    if ! is_valid_mac "$mac"; then
        echo "Error: Invalid MAC format '$mac'" >&2
        exit 1
    fi
    save_real_mac
    ip link set dev "$interface" down
    ip link set dev "$interface" address "$mac"
    ip link set dev "$interface" up
}

restore_mac() {
    die_if_not_root
    if [ ! -f "$saved_mac_file" ]; then
        echo "Error: Original MAC not saved, cannot revert." >&2
        exit 1
    fi
    mac=$(cat "$saved_mac_file")
    set_mac "$mac"
    echo "Restored original MAC $mac on $interface"
}

show_real_mac() {
    if [ -f "$saved_mac_file" ]; then
        cat "$saved_mac_file"
    else
        cat "/sys/class/net/$interface/address"
    fi
}

generate_mac() {
    brand="$1"

    if [ ! -f "$prefix_file" ]; then
        echo "Error: Prefix file not found at $prefix_file" >&2
        exit 1
    fi

    if [ -n "$brand" ]; then
        prefix=$(awk -v b="[$brand]" '
            $0 == b {found=1; next}
            /^\[.*\]/ && found {exit}
            found && NF {print}
        ' "$prefix_file" | shuf -n1)
    else
        prefix=$(awk '/^\[/ {next} NF' "$prefix_file" | shuf -n1)
    fi

    if [ -z "$prefix" ]; then
        echo "Error: No prefixes found for brand '$brand'" >&2
        exit 1
    fi

    prefix=${prefix%:}
    suffix=$(hexdump -n3 -e '3/1 ":%02X"' /dev/urandom)
    echo "$prefix$suffix"
}

# Read config values
read_config() {
    # Defaults
    mode="random"           # random (new random every boot)
    brand=""
    custom_mac=""
    
    if [ -f "$config_file" ]; then
        # Simple parsing: KEY=VALUE, ignore lines starting with # or empty lines
        while IFS='=' read -r key val; do
            case "$key" in
                MODE) mode="$val" ;;
                BRAND) brand="$val" ;;
                CUSTOM_MAC) custom_mac="$val" ;;
            esac
        done < <(grep -E '^[A-Z_]+=' "$config_file" | sed 's/\s//g')
    fi
}

# Modes:
# random        = new random MAC (any brand) every boot
# random-brand  = new random MAC from brand every boot
# persistent    = random MAC (any brand), kept forever until changed
# persistent-brand = random MAC from brand, kept forever until changed
# custom        = user-defined MAC, kept forever until changed

boot_action() {
    die_if_not_root
    save_real_mac

    case "$mode" in
        random)
            mac=$(generate_mac "")
            set_mac "$mac"
            ;;

        random-brand)
            mac=$(generate_mac "$brand")
            set_mac "$mac"
            ;;

        persistent)
            if [ -f "$persistent_mac_file" ]; then
                mac=$(cat "$persistent_mac_file")
            else
                mac=$(generate_mac "")
                echo "$mac" > "$persistent_mac_file"
            fi
            set_mac "$mac"
            ;;

        persistent-brand)
            if [ -f "$persistent_mac_file" ]; then
                mac=$(cat "$persistent_mac_file")
            else
                mac=$(generate_mac "$brand")
                echo "$mac" > "$persistent_mac_file"
            fi
            set_mac "$mac"
            ;;

        custom)
            if is_valid_mac "$custom_mac"; then
                set_mac "$custom_mac"
            else
                echo "Error: Invalid or missing CUSTOM_MAC in config." >&2
                exit 1
            fi
            ;;

        *)
            echo "Error: Unknown mode '$mode' in config." >&2
            exit 1
            ;;
    esac
}

print_usage() {
    cat <<EOF
Usage:
  macalter gen [brand] [--set]      Generate random MAC (optionally from brand), optionally set now
  macalter set XX:XX:XX:XX:XX:XX    Set specific MAC address now
  macalter real                     Show original hardware MAC
  macalter revert                   Restore original hardware MAC
  macalter boot                     Spoof MAC on boot per /etc/macalter.conf

Config file: /etc/macalter.conf
  MODE=           random | random-brand | persistent | persistent-brand | custom
  BRAND=          Brand name (for random-brand or persistent-brand)
  CUSTOM_MAC=     MAC address (for custom mode)
EOF
}

command="${1:-}"

read_config

case "$command" in
    gen)
        brand_arg="${2:-}"
        set_flag="${3:-}"

        # support "macalter gen --set" (any brand) or "macalter gen brand --set"
        if [ "$brand_arg" = "--set" ]; then
            mac=$(generate_mac "")
            set_mac "$mac"
            echo "Set MAC to $mac on $interface"
        elif [ "$set_flag" = "--set" ]; then
            mac=$(generate_mac "$brand_arg")
            set_mac "$mac"
            echo "Set MAC to $mac on $interface"
        else
            mac=$(generate_mac "$brand_arg")
            echo "$mac"
        fi
        ;;

    set)
        mac_arg="${2:-}"
        if [ -z "$mac_arg" ]; then
            echo "Error: Please specify MAC address to set." >&2
            exit 1
        fi
        set_mac "$mac_arg"
        echo "Set MAC to $mac_arg on $interface"
        ;;

    real)
        show_real_mac
        ;;

    revert)
        restore_mac
        ;;

    boot)
        boot_action
        ;;

    *)
        print_usage
        exit 1
        ;;
esac

